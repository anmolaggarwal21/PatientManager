@using DeviceManager.Repository;
@using Entities;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
<MudNavMenu>
    <MudText Typo="Typo.h4" Class="px-4">Application</MudText>
    <MudDivider></MudDivider>
    <MudNavLink Href="/dashboard" Match="NavLinkMatch.Prefix">Dashboard</MudNavLink>
    @if (showUser)
    {
        <MudNavLink Href="/User" Match="NavLinkMatch.Prefix">User</MudNavLink>
    }
    
    <MudNavLink Href="/Provider" Match="NavLinkMatch.Prefix">Provider</MudNavLink>
    <MudNavLink Href="/patient" Match="NavLinkMatch.Prefix">Patient</MudNavLink>
    <MudNavLink Href="/claim" Match="NavLinkMatch.Prefix">Claim</MudNavLink>
    
</MudNavMenu>



@* <div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">DeviceManager</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="login">
                <span class="oi oi-plus" aria-hidden="true"></span> Login
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>
</div>


 *@

@code {
    protected string roles { get; set; }
    protected bool showUser { get; set; } = false;
    [Inject] ProtectedLocalStorage protectedLocalStorage { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var roleName = await protectedLocalStorage.GetAsync<string?>("UserRole");
        if (roleName.Success && !string.IsNullOrEmpty(roleName.Value) && roleName.Value.Equals("Admin"))
        {
            showUser = true;
        }
        else
        {
            showUser = false;
        }

        base.OnInitializedAsync();
    }
}